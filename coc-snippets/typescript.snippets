# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet describe "describe()" b
describe("${1}", () => {
	${2}
});
endsnippet

snippet it "it()" b
it("${1}", () => {
	${2}
});
endsnippet

snippet test "test()" b
test("${1}", () => {
	${2}
});
endsnippet

snippet loop "loop()" b
[...Array(${1:3})].map((_, i) => ${2});
endsnippet

snippet eslint-disable-next-line "eslint-disable-next-line" b
eslint-disable-next-line
endsnippet

snippet each "each()" b
it.each([[1, 1, 2], [1, 2, 3], [2, 1, 3]])(
	"add(%s, %s) => %s",
	(a, b, expected) => {
		expect(a + b).toBe(expected);
	},
);
endsnippet

snippet clone "clone()" b
JSON.parse(JSON.stringify(${1}));
endsnippet

snippet try "try()" b
try {
	throw new Error("debug");
} catch (e) {
	console.log(e);
}
endsnippet

snippet try "vitest" b
import { describe, test, expect } from "vitest";

describe("", () => {
	test("", () => {
	});
});
endsnippet

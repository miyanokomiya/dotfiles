[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
autocmd FileType go :highlight goErr cterm=bold ctermfg=214
autocmd FileType go :match goErr /\<err\>/
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
" 保存時に必要なimportを自動的に挿入
let g:go_fmt_command = "goimports"
" LSPに任せる機能をOFFにする
let g:go_def_mapping_enabled = 0
let g:go_doc_keywordprg_enabled = 0
'''

# [[plugins]]
# repo = 'posva/vim-vue'
# on_ft = ['vue']
# hook_add = '''
# let g:vue_pre_processors = 'detect_on_enter'
# '''

[[plugins]]
repo = 'leafoftree/vim-vue-plugin'
on_ft = ['vue']
hook_add = '''
let g:vim_vue_plugin_highlight_vue_attr = 1
let g:vim_vue_plugin_use_sass = 1
let g:vim_vue_plugin_use_typescript = 1
let g:vim_vue_plugin_use_pug = 0
nnoremap <silent> <buffer> [[ :call search('^<\(template\<Bar>script\<Bar>style\)', 'bW')<CR>
nnoremap <silent> <buffer> ]] :call search('^<\(template\<Bar>script\<Bar>style\)', 'W')<CR>
nnoremap <silent> <buffer> [] :call search('^</\(template\<Bar>script\<Bar>style\)', 'bW')<CR>
nnoremap <silent> <buffer> ][ :call search('^</\(template\<Bar>script\<Bar>style\)', 'W')<CR>
'''

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug', 'vue']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
let g:rustfmt_autosave = 1
'''

[[plugins]] # jsonでダブルクォートが非表示になるのを解消
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
hook_add = '''
augroup FiletypeGroup
    autocmd!
    " .ts is a Typescript file
    au BufNewFile,BufRead *.ts set filetype=typescript
augroup END
'''

################
### Markdown ###
################
# quote内のプログラムをシンタックスハイライトする
[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = ['markdown','mkd']

# 編集中のMarkdownファイルのプレビューを作成する
[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd']

# プレビューをブラウザで開いてくれる
# :PrevimOpen
[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ['markdown','mkd']

# リッチマークダウン
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = 'cd app & yarn install'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']

################

[[plugins]]
repo = "hashivim/vim-terraform"
on_ft = ['terraform', 'tf', 'tfvars', 'tfstate', 'hcl']
hook_add = '''
let g:terraform_fmt_on_save = 1
'''

[[plugins]]
repo = 'miyanokomiya/key-seeker.nvim'
on_cmd = ['KeySeekerClip', 'KeySeekerDig']
hook_add = '''
nnoremap <silent> <Space>s :KeySeekerClip<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'vue', 'xml', 'svg', 'javascript', 'typescript']

[[plugins]]
repo = 'andys8/vim-elm-syntax'
on_ft = ['elm']

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'miyanokomiya/konbu.nvim'
on_cmd = ['KonbuP']

[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['graphql']

[[plugins]]
repo = 'burner/vim-svelte'
on_ft = ['svelte']

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = ['Defx']
hook_add = '''
nnoremap <silent> <C-n> :<C-u> Defx -search=`expand('%:p')` `getcwd()` <CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction

call defx#custom#option('_', {
  \ 'winwidth': 40,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'show_ignored_files': 1,
  \ 'buffer_name': 'exlorer',
  \ 'toggle': 1,
  \ 'resume': 1,
  \ })
'''

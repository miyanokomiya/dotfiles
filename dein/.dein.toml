[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \  'active': {
      \   'left': [
      \    ['mode', 'paste'],
      \    ['readonly', 'filename', 'modified', 'ale'],
      \    ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
      \   ]
      \  },
      \  'component_function': {
      \   'ale': 'ALEGetStatusLine'
      \  }
      \ }
set noshowmode
'''

[[plugins]]
repo = "neoclide/coc.nvim"
merge = 0
rev = "release"
hook_add = '''
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
hook_add = '''
let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
let g:ale_fixers = {
      \  'elm': ['elm-format'],
      \  'json': ['prettier'],
      \  'html': ['prettier'],
      \  'css': ['prettier', 'stylelint'],
      \  'sass': ['prettier', 'stylelint'],
      \  'scss': ['prettier', 'stylelint'],
      \  'javascript': ['eslint'],
      \  'typescript': ['eslint'],
      \  'vue': ['eslint'],
      \  'svelte': ['prettier'],
      \  'python': ['autopep8', 'isort'],
      \  'rust': ['rustfmt'],
      \  'go': ['gofmt'],
      \  'markdown': [
      \   {buffer, lines -> {'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t', 'read_temporary_file': 1}}
      \  ],
      \ }
let g:ale_fix_on_save = 0
let g:ale_javascript_prettier_use_local_config = 1
nmap <silent> <Space>p <Plug>(ale_previous_wrap)
nmap <silent> <Space>n <Plug>(ale_next_wrap)
nnoremap <Space>f :ALEFix<CR>
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \  'linter_checking': 'left',
      \  'linter_warnings': 'warning',
      \  'linter_errors': 'error',
      \  'linter_ok': 'left',
      \ }
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '|'
let g:indentLine_color_term = 239
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  autocmd ColorScheme * highlight LineNr ctermfg=239<Paste>
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  augroup MyAutoCmd
    autocmd!
  augroup END
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=250
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-overwin-f2)
map <Space>j <Plug>(easymotion-j)
map <Space>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
set rtp+=/usr/local/opt/fzf
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" dotファイルを含める&プレビュー
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'ag --hidden --ignore .git -g ""'}), <bang>0)
command! -bang -nargs=* Ag
  \ call fzf#vim#grep(
  \   'ag --column --color --hidden --ignore .git '.shellescape(<q-args>),
  \   0, fzf#vim#with_preview('right:50%', '?'), <bang>0)

" floating windowで表示する
let $FZF_DEFAULT_OPTS='--layout=reverse'
let g:fzf_layout = { 'window': 'call FloatingFZF()' }
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, '&signcolumn', 'no')

  let height = &lines - 3
  let width = float2nr(&columns - (&columns * 2 / 10))
  let col = float2nr((&columns - width) / 2)

  let opts = {
        \ 'relative': 'editor',
        \ 'row': 1,
        \ 'col': col,
        \ 'width': width,
        \ 'height': height
        \ }

  call nvim_open_win(buf, v:true, opts)
endfunction

nnoremap <C-p> :Files<CR>
nnoremap <Space>b :Buffers<CR>
nnoremap <Space>a :Ag<Space>
nnoremap <Space>m :Marks<CR>
nnoremap <Space>hf :History<CR>
nnoremap <Space>h: :History:<CR>
nnoremap <Space>h/ :History/<CR>
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'ruanyl/vim-gh-line'

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
let g:camelcasemotion_key = '<leader>'
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \  'active': {
      \   'left': [
      \    ['mode', 'paste'],
      \    ['readonly', 'filename', 'modified', 'ale'],
      \    ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
      \   ]
      \  },
      \  'component_function': {
      \   'ale': 'ALEGetStatusLine'
      \  }
      \ }
set noshowmode
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
      \  'vue': ['vls'],
      \  'typescript': ['typescript-language-server', '--stdio'],
      \  'go': ['golsp'],
      \  'ruby': ['solargraph', 'stdio'],
      \  'python': ['pyls']
      \ }
let g:LanguageClient_loadSettings = 1
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand("~/vim-lsp.log")
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
let g:ale_fixers = {
      \  'javascript': ['prettier-eslint'],
      \  'typescript': ['tslint'],
      \  'python': ['autopep8', 'isort'],
      \  'markdown': [
      \   {buffer, lines -> {'command': 'textlint -c ~/.config/textlintrc -o /dev/null --fix --no-color --quiet %t', 'read_temporary_file': 1}}
      \  ],
      \ }
let g:ale_fix_on_save = 0
let g:ale_javascript_prettier_use_local_config = 1
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \  'linter_checking': 'left',
      \  'linter_warnings': 'warning',
      \  'linter_errors': 'error',
      \  'linter_ok': 'left',
      \ }
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '|'
let g:indentLine_color_term = 239
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  autocmd ColorScheme * highlight LineNr ctermfg=239<Paste>
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  augroup MyAutoCmd
    autocmd!
  augroup END
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=250
'''
